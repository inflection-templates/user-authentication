meta {
  name: Validate JWT with JWKS
  type: http
  seq: 4
}

get {
  url: {{BASE_URL}}/api/users/users/profile
  auth: bearer
}

headers {
  authorization: Bearer {{JWT_ACCESS_TOKEN}}
  content-type: application/json
}

script:pre-request {
  // Check if we have a JWT token
  const token = bru.getEnvVar("JWT_ACCESS_TOKEN");
  if (!token) {
    console.error("‚ùå No JWT token found. Please run 'Test JWT Token Validation' first.");
    return;
  }
  
  console.log("üîê Using JWT token for authentication");
  console.log("Token:", token.substring(0, 50) + "...");
  
  // Decode token to show claims
  try {
    const tokenParts = token.split('.');
    if (tokenParts.length === 3) {
      const payload = JSON.parse(atob(tokenParts[1]));
      console.log("JWT Claims:", {
        UserID: payload.sid || payload.sub,
        Username: payload.name || payload.preferred_username,
        Role: payload.role,
        SessionID: payload.SessionId,
        ExpiresAt: new Date(payload.exp * 1000).toISOString(),
        IssuedAt: new Date(payload.iat * 1000).toISOString(),
        KeyID: payload.kid
      });
    }
  } catch (error) {
    console.error("Error decoding JWT:", error);
  }
}

script:post-response {
  let status = res.getStatus();
  console.log("Profile Request Status:", status);
  
  if (status == 200) {
    console.log("‚úÖ JWT token validation successful!");
    console.log("User profile retrieved:", res.body);
    
    // Verify the token was accepted by the service
    bru.setEnvVar("JWT_VALIDATION_STATUS", "Success");
    bru.setEnvVar("JWT_VALIDATED_AT", new Date().toISOString());
    
    console.log("üîê This proves that:");
    console.log("1. JWT token was generated with asymmetric keys");
    console.log("2. Service can validate the token using the same keys");
    console.log("3. JWKS endpoint provides the public key for validation");
    
  } else if (status == 401) {
    console.error("‚ùå JWT token validation failed - Unauthorized");
    bru.setEnvVar("JWT_VALIDATION_STATUS", "Failed - Unauthorized");
    
  } else {
    console.error("‚ùå Unexpected response:", status, res.body);
    bru.setEnvVar("JWT_VALIDATION_STATUS", "Failed - Unexpected response");
  }
}
