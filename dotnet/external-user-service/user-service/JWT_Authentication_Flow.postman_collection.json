{
	"info": {
		"_postman_id": "jwt-auth-delegation-collection",
		"name": "JWT Authentication Delegation Flow",
		"description": "Complete JWT Authentication Delegation flow demonstrating cross-service authentication. User Service (Port 5000) generates JWT tokens, Demo Service (Port 5001) validates them. This collection focuses on the working cross-service validation pattern. Execute folders in numerical order to understand the complete flow.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 - User Service Setup (Identity Provider)",
			"description": "First, start the User Service (Identity Provider) and verify it's running. This service handles authentication, generates JWT tokens, and exposes public keys via JWKS endpoint.",
			"item": [
				{
					"name": "Health Check - User Service",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["health"]
						},
						"description": "Check if User Service (Identity Provider) is running. Should return 200 OK if service is up."
					},
					"response": []
				},
				{
					"name": "Get JWKS Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/.well-known/jwks.json",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": [".well-known", "jwks.json"]
						},
						"description": "Get the JSON Web Key Set (JWKS) containing public keys. This is what the Demo Service uses to verify JWT tokens."
					},
					"response": []
				},
				{
					"name": "API Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/public",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "public"]
						},
						"description": "Get information about the User Service API configuration and available endpoints."
					},
					"response": []
				}
			]
		},
		{
			"name": "02 - User Authentication & JWT Generation",
			"description": "Authenticate users with the User Service to get JWT tokens. These tokens will be used to access the Demo Service.",
			"item": [
				{
					"name": "User Login - Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/login",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "login"]
						},
						"description": "Login as admin user to get JWT token. Save the 'accessToken' from the response for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "User Login - Regular User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"user123\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/login",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "login"]
						},
						"description": "Login as regular user to get JWT token. Save the 'accessToken' from the response for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "User Login - Moderator",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"moderator\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/login",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "login"]
						},
						"description": "Login as moderator user to get JWT token. Save the 'accessToken' from the response for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "User Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/register",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "register"]
						},
						"description": "Register a new user account. After registration, you can login to get a JWT token."
					},
					"response": []
				}
			]
		},
		{
			"name": "03 - Demo Service Setup (Resource Service)",
			"description": "Start the Demo Service (Resource Service) and verify it's running. This service validates JWT tokens from the User Service.",
			"item": [
				{
					"name": "Health Check - Demo Service",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "health"]
						},
						"description": "Check if Demo Service (Resource Service) is running. Should return 200 OK if service is up."
					},
					"response": []
				}
			]
		},
		{
			"name": "04 - Test JWT Token Validation",
			"description": "Test JWT token validation by the Demo Service. Use the tokens obtained from User Service login.",
			"item": [
				{
					"name": "Get User Info from Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-info",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-info"]
						},
						"description": "Test JWT token validation by getting user information from the token claims. Requires valid JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Get User Roles from Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-roles",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-roles"]
						},
						"description": "Extract user roles from JWT token claims. Shows how the Demo Service reads role information from the token."
					},
					"response": []
				},
				{
					"name": "Get User Permissions from Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-permissions",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-permissions"]
						},
						"description": "Extract user permissions from JWT token claims. Shows how the Demo Service reads permission information from the token."
					},
					"response": []
				}
			]
		},
		{
			"name": "05 - Test Role-Based Access Control",
			"description": "Test role-based access control using JWT tokens with different user roles.",
			"item": [
				{
					"name": "Check Specific Role - Admin",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/check-role/admin",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "check-role", "admin"]
						},
						"description": "Check if the user has the 'admin' role. Should return true for admin users."
					},
					"response": []
				},
				{
					"name": "Check Specific Role - User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt_token}}",
								"description": "Use the JWT token obtained from regular user login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/check-role/user",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "check-role", "user"]
						},
						"description": "Check if the user has the 'user' role. Should return true for regular users."
					},
					"response": []
				},
				{
					"name": "Check Specific Permission",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/check-permission/write:posts",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "check-permission", "write:posts"]
						},
						"description": "Check if the user has the 'write:posts' permission. Shows permission-based access control."
					},
					"response": []
				}
			]
		},
		{
			"name": "06 - Test Protected Endpoints",
			"description": "Test endpoints that require specific roles or permissions using JWT tokens.",
			"item": [
				{
					"name": "Admin-Only Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/admin-only",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "admin-only"]
						},
						"description": "Access admin-only endpoint. Requires JWT token with 'admin' role. Should return 200 OK for admin users."
					},
					"response": []
				},
				{
					"name": "Admin-Only Endpoint (Unauthorized)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt_token}}",
								"description": "Use the JWT token obtained from regular user login (should fail)"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/admin-only",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "admin-only"]
						},
						"description": "Try to access admin-only endpoint with non-admin user. Should return 403 Forbidden."
					},
					"response": []
				},
				{
					"name": "Moderator or Admin Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{moderator_jwt_token}}",
								"description": "Use the JWT token obtained from moderator login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/moderator-or-admin",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "moderator-or-admin"]
						},
						"description": "Access endpoint that requires moderator or admin role. Should work for both moderator and admin users."
					},
					"response": []
				}
			]
		},
		{
			"name": "07 - Test Token Security & Validation",
			"description": "Test various token security scenarios and validation edge cases.",
			"item": [
				{
					"name": "Invalid Token - No Authorization Header",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-info",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-info"]
						},
						"description": "Try to access protected endpoint without JWT token. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Invalid Token - Malformed Bearer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here",
								"description": "Use an invalid JWT token to test validation"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-info",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-info"]
						},
						"description": "Try to access protected endpoint with invalid JWT token. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Valid Token - Different User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt_token}}",
								"description": "Use the JWT token obtained from regular user login"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-info",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-info"]
						},
						"description": "Access protected endpoint with valid JWT token from different user. Should return 200 OK with user's information."
					},
					"response": []
				}
			]
		},
		{
			"name": "08 - Token Blacklisting & Management",
			"description": "Test token blacklisting and management functionality in the User Service.",
			"item": [
				{
					"name": "User Logout (Blacklist Token)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token obtained from admin login"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/auth/logout",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "logout"]
						},
						"description": "Logout user by blacklisting the JWT token. After logout, the token cannot be used by any service."
					},
					"response": []
				},
				{
					"name": "Check Token Blacklist Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/auth/blacklist/{{jti_from_token}}",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5000",
							"path": ["api", "auth", "blacklist", "{{jti_from_token}}"]
						},
						"description": "Check if a specific token JTI is blacklisted. Returns 200 if blacklisted, 404 if not blacklisted."
					},
					"response": []
				}
			]
		},
		{
			"name": "09 - Test Expired/Blacklisted Tokens",
			"description": "Test scenarios with expired or blacklisted JWT tokens.",
			"item": [
				{
					"name": "Use Blacklisted Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use the JWT token that was blacklisted during logout"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/user-info",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "user-info"]
						},
						"description": "Try to use a blacklisted JWT token. Should return 401 Unauthorized as the token is no longer valid."
					},
					"response": []
				}
			]
		},
		{
			"name": "10 - Decentralized Permissions Examples",
			"description": "Test how different services can enforce their own business rules based on JWT claims without calling User Service.",
			"item": [
				{
					"name": "Order Service - Place Order (Buyer/Seller)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use any valid JWT token to test role-based access"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/order-service/place-order",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "order-service", "place-order"]
						},
						"description": "Test Order Service endpoint that cares about 'buyer' and 'seller' roles. Shows decentralized permission enforcement."
					},
					"response": []
				},
				{
					"name": "Inventory Service - Update Stock (Warehouse Manager)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use any valid JWT token to test role-based access"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/inventory-service/update-stock",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "inventory-service", "update-stock"]
						},
						"description": "Test Inventory Service endpoint that cares about 'warehouse_manager' role. Shows service-specific business logic."
					},
					"response": []
				},
				{
					"name": "Finance Service - Process Payment (Financial Roles)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use any valid JWT token to test role-based access"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/finance-service/process-payment",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "finance-service", "process-payment"]
						},
						"description": "Test Finance Service endpoint that cares about 'accountant' and 'finance_manager' roles."
					},
					"response": []
				},
				{
					"name": "HR Service - View Employee (HR Roles)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use any valid JWT token to test role-based access"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/hr-service/view-employee",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "hr-service", "view-employee"]
						},
						"description": "Test HR Service endpoint that cares about 'hr_manager' and 'hr_staff' roles."
					},
					"response": []
				},
				{
					"name": "Custom Business Rules Engine",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"description": "Use any valid JWT token to test custom business logic"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/demoresource/business-logic/custom-rules",
							"protocol": "http",
							"host": ["localhost"],
							"port": "5001",
							"path": ["api", "demoresource", "business-logic", "custom-rules"]
						},
						"description": "Test custom business rules engine that applies different logic based on JWT claims. Demonstrates the power of decentralized permissions."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "admin_jwt_token",
			"value": "YOUR_ADMIN_JWT_TOKEN_HERE",
			"type": "string",
			"description": "JWT token obtained from admin user login"
		},
		{
			"key": "user_jwt_token",
			"value": "YOUR_USER_JWT_TOKEN_HERE",
			"type": "string",
			"description": "JWT token obtained from regular user login"
		},
		{
			"key": "moderator_jwt_token",
			"value": "YOUR_MODERATOR_JWT_TOKEN_HERE",
			"type": "string",
			"description": "JWT token obtained from moderator user login"
		},
		{
			"key": "jti_from_token",
			"value": "EXTRACT_JTI_FROM_JWT_TOKEN",
			"type": "string",
			"description": "JTI (JSON Token Identifier) extracted from JWT token for blacklist testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Postman collection for JWT Authentication Delegation",
					"// This collection demonstrates the working architecture where:",
					"// - User Service (Port 5000) = Identity Provider (generates JWT tokens, serves JWKS)",
					"// - Demo Service (Port 5001) = Resource Service (validates JWT tokens from User Service)",
					"//",
					"// ✅ WORKING: Cross-service validation (Demo Service validates User Service tokens)",
					"// ❌ REMOVED: Self-validation endpoints (User Service validating its own tokens)",
					"//",
					"// This collection focuses on the proven working cross-service authentication pattern.",
					"",
					"console.log('JWT Authentication Delegation Collection - Cross-Service Validation');",
					"console.log('✅ User Service (Port 5000): Identity Provider - Generates tokens');",
					"console.log('✅ Demo Service (Port 5001): Resource Service - Validates tokens');",
					"console.log('🎯 Focus: Cross-service authentication pattern');"
				]
			}
		}
	]
}
